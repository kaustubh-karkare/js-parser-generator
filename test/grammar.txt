
{
	var toarray = function(a){ return Array.isArray(a) ? a : ( a ? [a] : [] ); };
	var operate = function(left,operator,right){
		var result = left(), next;
		operator = toarray(operator);
		right = toarray(right);
		while(operator.length){
			next = right.shift()();
			switch(operator.shift()){
				case "+" : result += next; break;
				case "-" : result -= next; break;
				case "*" : result *= next; break;
				case "/" : result /= next; break;
				case "%" : result %= next; break;
				case "==" : result = (result==next ? 1 : 0); break;
				case "!=" : result = (result!=next ? 1 : 0); break;
				case "<" : result = (result<next ? 1 : 0); break;
				case "<=" : result = (result<=next ? 1 : 0); break;
				case ">" : result = (result>next ? 1 : 0); break;
				case ">=" : result = (result>=next ? 1 : 0); break;
				case "||" : result = (result||next ? 1 : 0); break;
				case "&&" : result = (result&&next ? 1 : 0); break;
				case "|" : result |= next; break;
				case "^" : result ^= next; break;
				case "&" : result &= next; break;
			}
		}
		return result;
	};
	var data = {};
}

program
	= _ sl:statement* _
		{ return toarray(sl).map(function(s){ return s(); }); }
	;

whitespace
	= [ \t\n]
	/ "/*" .*? "*/"
	/ "//" .*? "\n"

_ = whitespace*

statement
	= "{" _ list:statement* "}" _
		{ return toarray(list).map(function(s){ return s(); }); }
	/ "if" _ "(" _ c:expression ")" _ t:statement ( "else" _ e:statement )?
		{ return c() ? t() : e && e(); }
	/ "while" _ "(" _ c:expression ")" _ t:statement
		{ var l = []; while(c()) l.push(t()); return l; }
	/ "repeat" _ "(" _ c:expression ")" _ t:statement
		{ for(var i=0, j=c(); i<j; ++i) t(); }
	/ exp:expression ";" _
		{ return exp(); }

expression = exp:exp_assign { return exp(); } ;

exp_assign
	= (left:lvalue eq:"=" _)* right:exp_ternary
		{
			left = toarray(left);
			right = right();
			while(left.length) data[left.pop()()] = right;
			return right;
		}

exp_ternary = c:exp_lor ("?" _ t:exp_assign _ ":" _ e:exp_assign)? { return t ? ( c() ? t() : e() ) : c(); } ;

exp_lor = left:exp_land (operator:"||" _ right:exp_land)* { return operate(left,operator,right); } ;
exp_land = left:exp_bor (operator:"&&" _ right:exp_bor)* { return operate(left,operator,right); } ;

exp_bor = left:exp_bxor (operator:"|" _ right:exp_bxor)* { return operate(left,operator,right); } ;
exp_bxor = left:exp_band (operator:"^" _ right:exp_band)* { return operate(left,operator,right); } ;
exp_band = left:exp_eql (operator:"&" _ right:exp_eql)* { return operate(left,operator,right); } ;

exp_eql = left:exp_cmp (operator:("=="/"!=") _ right:exp_cmp)* { return operate(left,operator,right); } ;
exp_cmp = left:exp_add (operator:("<"/">"/"<="/">=") _ right:exp_add)* { return operate(left,operator,right); } ;

exp_add = left:exp_mul (operator:[+-] _ right:exp_mul)* { return operate(left,operator,right); } ;
exp_mul = left:exp_val (operator:[*/%] _ right:exp_val)* { return operate(left,operator,right); } ;

exp_val
	= "(" _ x:exp_assign _ ")" _ { return x(); }
	/ y:rvalue { return y(); }
	/ z:integer { return z(); }

rvalue = name:lvalue { return data[name()] || 0; } ;
lvalue = name:([A-Za-z_][A-Za-z0-9_]*) _ { return toarray(name).join(""); } ;

integer = (digits:[+-] _)? digits:[0-9]+ _ { return parseInt(toarray(digits).join(""),10); } ;