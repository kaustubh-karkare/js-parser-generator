
{
	env.toarray = function(data){
		if(!data) return new Array();
		else if(!Array.isArray(data)) return new Array(data);
		else return data;
	};
	env.operator = function(left,operator,right){
		var result = left.eval(), next;
		operator = env.toarray(operator);
		right = env.toarray(right);
		while(operator.length){
			next = right.shift().eval();
			switch(operator.shift()){
				case "+" : result += next; break;
				case "-" : result -= next; break;
				case "*" : result *= next; break;
				case "/" : result /= next; break;
				case "%" : result %= next; break;
				case "==" : result = result == next; break;
				case "!=" : result = result != next; break;
				case "<" : result = result < next; break;
				case "<=" : result = result <= next; break;
				case ">" : result = result > next; break;
				case ">=" : result = result >= next; break;
			}
		}
		return result;
	};
}

block
	= sl:(statement*) whitespace*
		{ return env.toarray(sl).map(function(s){ return s.eval(); }); }
	;

whitespace = [ \t\n] ;
_ = whitespace*? ;

statement
	= _ "if" _ "(" c:expression _ ")" t:statement ( _ "else" e:statement )?
		{ if(c.eval()) t.eval(); else if(e) e.eval(); }
	/ exp:expression _ ";"
		{ return exp.eval(); }
	;

expression = exp:exp_assign { return exp.eval(); } ;

exp_assign
	= (left:lvalue _ "=")* right:exp_cmp
		{
			left = env.toarray(left);
			right = right.eval();
			while(left.length) env[left.pop().eval()] = right;
			return right;
		}
	;

exp_eql = left:exp_cmp (_ operator:("=="/"!=") right:exp_cmp)* { return env.operator(left,operator,right); } ;
exp_cmp = left:exp_add (_ operator:("<"/">"/"<="/">=") right:exp_add)* { return env.operator(left,operator,right); } ;
exp_add = left:exp_mul (_ operator:[+-] right:exp_mul)* { return env.operator(left,operator,right); } ;
exp_mul = left:exp_val (_ operator:[*/%] right:exp_val)* { return env.operator(left,operator,right); } ;

exp_val
	= _ "(" x:expression _ ")" { return x.eval(); }
	/ y:rvalue { return y.eval(); }
	/ z:integer { return z.eval(); }
	;

rvalue = name:lvalue { return env[name.eval()]; } ;
lvalue = _ name:([A-Za-z_][A-Za-z0-9_]*) { return env.toarray(name).join(""); } ;

integer = _ digits:[0-9]+ { return parseInt(env.toarray(digits).join(""),10); } ;